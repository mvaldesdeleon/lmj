#!/usr/bin/env node

//Â Libraries
var program = require('commander');
var helper  = require('../lib/helper.js');
var config  = require('../lib/config.js');
var router  = require('../lib/router.js');
var util    = require('util');

var noop = function() {};

// Default parameters for the CLI options.
var defaultOptions = {
  config: '~/lmj.conf',
  cache: '~/.lmj'
};

var configFile = {
  'lmt': {
    'apiKey': ''
  },
  'jira': {
    'userName': '',
    'password': ''
  }
};

// ###############################################################
// ###############################################################

// Program set-up
program
  // Version
  .version(require('../package.json').version || '')
  // Global options
  .option('--config <file>', 'use the specified configuration file. defaults to ~/lmj.conf', defaultOptions.config)
  .option('--cacheDir <directory>', 'use the specified cache directory. defaults to ~/.lmj', defaultOptions.cache)
  .option('-v, --verbose', 'output more information', function(value, total) { return total++; }, 0);

// List
program
  .command('list <projects|tasks|clients|clocks>')
  .description('lists your current LogMyTime Projects or Tasks')
  .option('--sync', 'syncrhonizes the requested items before listing them', false)
  .option('--group', '(projects) group by client', false)
  .option('--used', '(clients) only show clients of currently asigned projects', false)
  .action(function(type, command) {
    // Get the valid values from the command specification itself, Cajun-style.
    if (command._args[0].name.split('|').indexOf(type) !== -1) {
      if (command._options === undefined) command._options = [];
      command._options.push('type');
      command['type'] = type;
    } else {
      helper.invalidArgument(command._name, type);
      process.exit(1);
    }
  });

program
  .command('log-time')
  .option('--project <id>', 'the selected project\'s <id>', function(id) { return parseInt(id, 10); }, 0)
  .option('--task <id>', 'the selected task\'s <id>', function(id) { return parseInt(id, 10); }, 0)
  .option('--date <date>', 'the <date> as something Date() understands. defaults to today', function(date) { return new Date(date); }, new Date())
  .option('--time <time>', 'the <time> duration as number (eg. 2.5) or string (eg. 2:30)', '')
  .description('manually creates a LogMyTime Entry')
  .action(noop);

program
  .command('sync')
  .description('syncrhonizes the local repository of LogMyTime Projects and Tasks')
  .action(noop);

program
  .command('start [name]')
  .description('starts a local LogMyTime stop-watch.')
  .action(function(name, command) {
    if (command._options === undefined) command._options = [];
    command._options.push('name');
    command['name'] = name;
  });

program
  .command('stop [name]')
  .description('stops a local LogMyTime stop-watch')
  .action(function(name, command) {
    if (command._options === undefined) command._options = [];
    command._options.push('name');
    command['name'] = name;
  });

// Process the actual input. 'action' calls get triggered immediately.
program.parse(process.argv);

// ###############################################################
// ###############################################################

var command = helper.getCommand(program);

// If no command was specified, abort with the help view.
if (command === null) {
  program.outputHelp();
  process.exit();
}

// ###############################################################
// ###############################################################

// Get the goodies!
var programOptions = helper.getOptions(program),
    commandName = command._name,
    commandOptions = helper.getOptions(command);

// Load the configuration file
var result = config.load(programOptions.config);

// If the file couldn't be loaded, load a configuration template and attempt to save it
if (result instanceof Error) {
  config.load(configFile);
  config.save(programOptions.config, true);
}

// The final options object
var options = {};

util._extend(options, config.get()); // Add the options from the configuration file
util._extend(options, programOptions); // Add the global options
util._extend(options, commandOptions); // Add the command options

// ###############################################################
// ###############################################################

// Create the cache folder (or check if it exists). If it fails, abort.
if (helper.makePath(options.cacheDir) !== true) {
  helper.genericError('could not create cache directory'); 
  process.exit(1);
}

router.route(commandName, options);